General Parameters
    C (float, default=1.0)
        Controls the trade-off between achieving a low error and having a simple model (regularization).
        A smaller C (e.g., 0.1) makes the decision boundary smoother (more regularization).
        A larger C (e.g., 10) allows the model to fit the training data more closely (less regularization).

    kernel (str, default='rbf')
        Defines the type of kernel function used in the SVM. Common choices:
            'linear' → Linear kernel (good for linearly separable data).
            'rbf' → Radial Basis Function kernel (default, useful for nonlinear data).
            'poly' → Polynomial kernel (for complex patterns).
            'sigmoid' → Similar to a neural network activation function.

    degree (int, default=3) [For poly kernel only]
        The degree of the polynomial kernel function. Ignored for other kernels.

    gamma ({'scale', 'auto'} or float, default='scale') [For rbf, poly, and sigmoid kernels]
        Defines how much influence a single training example has.
        'scale' → Uses 1/((n_features)*X.var())
        'auto' → Uses 1/(n_features)
        Float values can be set manually (smaller values → more flexible boundary, larger values → more rigid).

    coef0 (float, default=0.0) [For poly and sigmoid kernels]
        Controls the influence of high-degree polynomial terms.

Optimization & Convergence
    shrinking (bool, default=True)
        Uses a heuristic to speed up training. Setting False may be slower but can improve accuracy in some cases.

    probability (bool, default=False)
        Enables probability estimates using 5-fold cross-validation.
        Setting this to True allows using predict_proba() but slows training.

    tol (float, default=0.001)
        Stopping criterion for the optimization. Smaller values mean the model will try to converge more precisely but may take longer.

    cache_size (float, default=200 MB)
        Allocates memory for storing the kernel matrix. Increasing this can speed up training.

Handling Imbalanced Data
    class_weight (dict or 'balanced', default=None)
        Adjusts the weights for each class.
        None → All classes have equal weight.
        'balanced' → Adjusts weights inversely proportional to class frequencies (useful for imbalanced datasets).

Output Control
    verbose (bool, default=False)
        If True, prints training details. Useful for debugging but can clutter output.

    max_iter (int, default=-1)
        Sets a hard limit on iterations (-1 means no limit). Useful for preventing long training times.
        decision_function_shape ({'ovo', 'ovr'}, default='ovr')
        'ovr' → One-vs-Rest strategy (faster and commonly used).
        'ovo' → One-vs-One strategy (slower, but sometimes more accurate for multi-class classification).

    break_ties (bool, default=False)
        If True, in case of a tie, the prediction is decided based on confidence scores.
        Only used when decision_function_shape='ovr' and number of classes > 2.

    random_state (int, default=None)
        Ensures reproducibility when using stochastic components.

Key Points
    C and gamma are the most important hyperparameters for tuning SVMs.
    Kernel choice affects the decision boundary. linear is fast for simple cases, rbf is powerful for nonlinear data.

    Shrinking and cache_size impact training speed.

    Class weights are useful for imbalanced datasets. Colin Balanced class data

    Probability estimation (probability=True) can be useful but slows down training.


RBF Parameters
    Kernal = RBF
    C = .01, .1, 1, 10 , 100
        smaller values improve genralization
        larger values improve accuracy but can over fit
    gamma = scale or auto
        scale = 1/((n_features)*X.var())
        auto = 1/(n_features)
    tol = 0.0001
        stopping criterion for the optimization
        smaller values mean the model will try to converge more precisely but may take longer
    cache_size = 500
        allocates memory for storing the kernel matrix
        increasing this can speed up training
    decision_function_shape = ovo
        'ovo' → One-vs-One strategy (slower, but sometimes more accurate for multi-class classification).
        
Linear Parameters
    Kernal = Linear
    C = .01, .1, 1, 10 , 100
        smaller values improve genralization
        larger values improve accuracy but can over fit
    tol = 0.0001
        stopping criterion for the optimization
        smaller values mean the model will try to converge more precisely but may take longer